// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpc/pb/social.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Social_AddComment_FullMethodName                  = "/pb.social/AddComment"
	Social_DelComment_FullMethodName                  = "/pb.social/DelComment"
	Social_GetVideoCommentListById_FullMethodName     = "/pb.social/GetVideoCommentListById"
	Social_GetCommentCountByVideoId_FullMethodName    = "/pb.social/GetCommentCountByVideoId"
	Social_VideoLike_FullMethodName                   = "/pb.social/VideoLike"
	Social_VideoUnlike_FullMethodName                 = "/pb.social/VideoUnlike"
	Social_GetVideoLikedCountByVideoId_FullMethodName = "/pb.social/GetVideoLikedCountByVideoId"
	Social_GetUserLikeVideoIdList_FullMethodName      = "/pb.social/GetUserLikeVideoIdList"
	Social_FollowUser_FullMethodName                  = "/pb.social/FollowUser"
	Social_UnfollowUser_FullMethodName                = "/pb.social/UnfollowUser"
	Social_GetUserFollowerCount_FullMethodName        = "/pb.social/GetUserFollowerCount"
	Social_GetUserFollowCount_FullMethodName          = "/pb.social/GetUserFollowCount"
	Social_GetUserFollowIdList_FullMethodName         = "/pb.social/GetUserFollowIdList"
	Social_GetUserFollowerIdList_FullMethodName       = "/pb.social/GetUserFollowerIdList"
)

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialClient interface {
	// 评论相关功能
	AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error)
	GetVideoCommentListById(ctx context.Context, in *GetCommentListByIdReq, opts ...grpc.CallOption) (*GetCommentListByIdResp, error)
	GetCommentCountByVideoId(ctx context.Context, in *GetCommentCountByVideoIdReq, opts ...grpc.CallOption) (*GetCommentCountByVideoIdResp, error)
	// 点赞相关功能
	VideoLike(ctx context.Context, in *VideoLikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error)
	VideoUnlike(ctx context.Context, in *VideoUnlikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error)
	GetVideoLikedCountByVideoId(ctx context.Context, in *GetVideoLikedCountByVideoIdReq, opts ...grpc.CallOption) (*GetVideoLikedCountByVideoIdResp, error)
	GetUserLikeVideoIdList(ctx context.Context, in *GetUserLikeVideoIdListReq, opts ...grpc.CallOption) (*GetUserLikeVideoIdListResp, error)
	// 关注功能
	FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error)
	UnfollowUser(ctx context.Context, in *UnfollowUserReq, opts ...grpc.CallOption) (*UnfollowUserResp, error)
	GetUserFollowerCount(ctx context.Context, in *GetUserFollowerCountReq, opts ...grpc.CallOption) (*GetUserFollowerCountResp, error)
	GetUserFollowCount(ctx context.Context, in *GetUserFollowCountReq, opts ...grpc.CallOption) (*GetUserFollowCountResp, error)
	GetUserFollowIdList(ctx context.Context, in *GetUserFollowIdListReq, opts ...grpc.CallOption) (*GetUserFollowIdListResp, error)
	GetUserFollowerIdList(ctx context.Context, in *GetUserFollowerIdListReq, opts ...grpc.CallOption) (*GetUserFollowerIdListResp, error)
}

type socialClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialClient(cc grpc.ClientConnInterface) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, Social_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error) {
	out := new(DelCommentResp)
	err := c.cc.Invoke(ctx, Social_DelComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetVideoCommentListById(ctx context.Context, in *GetCommentListByIdReq, opts ...grpc.CallOption) (*GetCommentListByIdResp, error) {
	out := new(GetCommentListByIdResp)
	err := c.cc.Invoke(ctx, Social_GetVideoCommentListById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetCommentCountByVideoId(ctx context.Context, in *GetCommentCountByVideoIdReq, opts ...grpc.CallOption) (*GetCommentCountByVideoIdResp, error) {
	out := new(GetCommentCountByVideoIdResp)
	err := c.cc.Invoke(ctx, Social_GetCommentCountByVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) VideoLike(ctx context.Context, in *VideoLikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error) {
	out := new(VideoLikeResp)
	err := c.cc.Invoke(ctx, Social_VideoLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) VideoUnlike(ctx context.Context, in *VideoUnlikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error) {
	out := new(VideoLikeResp)
	err := c.cc.Invoke(ctx, Social_VideoUnlike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetVideoLikedCountByVideoId(ctx context.Context, in *GetVideoLikedCountByVideoIdReq, opts ...grpc.CallOption) (*GetVideoLikedCountByVideoIdResp, error) {
	out := new(GetVideoLikedCountByVideoIdResp)
	err := c.cc.Invoke(ctx, Social_GetVideoLikedCountByVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserLikeVideoIdList(ctx context.Context, in *GetUserLikeVideoIdListReq, opts ...grpc.CallOption) (*GetUserLikeVideoIdListResp, error) {
	out := new(GetUserLikeVideoIdListResp)
	err := c.cc.Invoke(ctx, Social_GetUserLikeVideoIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error) {
	out := new(FollowUserResp)
	err := c.cc.Invoke(ctx, Social_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnfollowUser(ctx context.Context, in *UnfollowUserReq, opts ...grpc.CallOption) (*UnfollowUserResp, error) {
	out := new(UnfollowUserResp)
	err := c.cc.Invoke(ctx, Social_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserFollowerCount(ctx context.Context, in *GetUserFollowerCountReq, opts ...grpc.CallOption) (*GetUserFollowerCountResp, error) {
	out := new(GetUserFollowerCountResp)
	err := c.cc.Invoke(ctx, Social_GetUserFollowerCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserFollowCount(ctx context.Context, in *GetUserFollowCountReq, opts ...grpc.CallOption) (*GetUserFollowCountResp, error) {
	out := new(GetUserFollowCountResp)
	err := c.cc.Invoke(ctx, Social_GetUserFollowCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserFollowIdList(ctx context.Context, in *GetUserFollowIdListReq, opts ...grpc.CallOption) (*GetUserFollowIdListResp, error) {
	out := new(GetUserFollowIdListResp)
	err := c.cc.Invoke(ctx, Social_GetUserFollowIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserFollowerIdList(ctx context.Context, in *GetUserFollowerIdListReq, opts ...grpc.CallOption) (*GetUserFollowerIdListResp, error) {
	out := new(GetUserFollowerIdListResp)
	err := c.cc.Invoke(ctx, Social_GetUserFollowerIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
// All implementations must embed UnimplementedSocialServer
// for forward compatibility
type SocialServer interface {
	// 评论相关功能
	AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error)
	DelComment(context.Context, *DelCommentReq) (*DelCommentResp, error)
	GetVideoCommentListById(context.Context, *GetCommentListByIdReq) (*GetCommentListByIdResp, error)
	GetCommentCountByVideoId(context.Context, *GetCommentCountByVideoIdReq) (*GetCommentCountByVideoIdResp, error)
	// 点赞相关功能
	VideoLike(context.Context, *VideoLikeReq) (*VideoLikeResp, error)
	VideoUnlike(context.Context, *VideoUnlikeReq) (*VideoLikeResp, error)
	GetVideoLikedCountByVideoId(context.Context, *GetVideoLikedCountByVideoIdReq) (*GetVideoLikedCountByVideoIdResp, error)
	GetUserLikeVideoIdList(context.Context, *GetUserLikeVideoIdListReq) (*GetUserLikeVideoIdListResp, error)
	// 关注功能
	FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error)
	UnfollowUser(context.Context, *UnfollowUserReq) (*UnfollowUserResp, error)
	GetUserFollowerCount(context.Context, *GetUserFollowerCountReq) (*GetUserFollowerCountResp, error)
	GetUserFollowCount(context.Context, *GetUserFollowCountReq) (*GetUserFollowCountResp, error)
	GetUserFollowIdList(context.Context, *GetUserFollowIdListReq) (*GetUserFollowIdListResp, error)
	GetUserFollowerIdList(context.Context, *GetUserFollowerIdListReq) (*GetUserFollowerIdListResp, error)
	mustEmbedUnimplementedSocialServer()
}

// UnimplementedSocialServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServer struct {
}

func (UnimplementedSocialServer) AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedSocialServer) DelComment(context.Context, *DelCommentReq) (*DelCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelComment not implemented")
}
func (UnimplementedSocialServer) GetVideoCommentListById(context.Context, *GetCommentListByIdReq) (*GetCommentListByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoCommentListById not implemented")
}
func (UnimplementedSocialServer) GetCommentCountByVideoId(context.Context, *GetCommentCountByVideoIdReq) (*GetCommentCountByVideoIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountByVideoId not implemented")
}
func (UnimplementedSocialServer) VideoLike(context.Context, *VideoLikeReq) (*VideoLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoLike not implemented")
}
func (UnimplementedSocialServer) VideoUnlike(context.Context, *VideoUnlikeReq) (*VideoLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUnlike not implemented")
}
func (UnimplementedSocialServer) GetVideoLikedCountByVideoId(context.Context, *GetVideoLikedCountByVideoIdReq) (*GetVideoLikedCountByVideoIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoLikedCountByVideoId not implemented")
}
func (UnimplementedSocialServer) GetUserLikeVideoIdList(context.Context, *GetUserLikeVideoIdListReq) (*GetUserLikeVideoIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikeVideoIdList not implemented")
}
func (UnimplementedSocialServer) FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedSocialServer) UnfollowUser(context.Context, *UnfollowUserReq) (*UnfollowUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedSocialServer) GetUserFollowerCount(context.Context, *GetUserFollowerCountReq) (*GetUserFollowerCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowerCount not implemented")
}
func (UnimplementedSocialServer) GetUserFollowCount(context.Context, *GetUserFollowCountReq) (*GetUserFollowCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowCount not implemented")
}
func (UnimplementedSocialServer) GetUserFollowIdList(context.Context, *GetUserFollowIdListReq) (*GetUserFollowIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowIdList not implemented")
}
func (UnimplementedSocialServer) GetUserFollowerIdList(context.Context, *GetUserFollowerIdListReq) (*GetUserFollowerIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowerIdList not implemented")
}
func (UnimplementedSocialServer) mustEmbedUnimplementedSocialServer() {}

// UnsafeSocialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServer will
// result in compilation errors.
type UnsafeSocialServer interface {
	mustEmbedUnimplementedSocialServer()
}

func RegisterSocialServer(s grpc.ServiceRegistrar, srv SocialServer) {
	s.RegisterService(&Social_ServiceDesc, srv)
}

func _Social_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).AddComment(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DelComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DelComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_DelComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DelComment(ctx, req.(*DelCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetVideoCommentListById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetVideoCommentListById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetVideoCommentListById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetVideoCommentListById(ctx, req.(*GetCommentListByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetCommentCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetCommentCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetCommentCountByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetCommentCountByVideoId(ctx, req.(*GetCommentCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_VideoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).VideoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_VideoLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).VideoLike(ctx, req.(*VideoLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_VideoUnlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUnlikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).VideoUnlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_VideoUnlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).VideoUnlike(ctx, req.(*VideoUnlikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetVideoLikedCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoLikedCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetVideoLikedCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetVideoLikedCountByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetVideoLikedCountByVideoId(ctx, req.(*GetVideoLikedCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserLikeVideoIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLikeVideoIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserLikeVideoIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserLikeVideoIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserLikeVideoIdList(ctx, req.(*GetUserLikeVideoIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).FollowUser(ctx, req.(*FollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnfollowUser(ctx, req.(*UnfollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserFollowerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowerCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserFollowerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserFollowerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserFollowerCount(ctx, req.(*GetUserFollowerCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserFollowCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserFollowCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserFollowCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserFollowCount(ctx, req.(*GetUserFollowCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserFollowIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserFollowIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserFollowIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserFollowIdList(ctx, req.(*GetUserFollowIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserFollowerIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowerIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserFollowerIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserFollowerIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserFollowerIdList(ctx, req.(*GetUserFollowerIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Social_ServiceDesc is the grpc.ServiceDesc for Social service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Social_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _Social_AddComment_Handler,
		},
		{
			MethodName: "DelComment",
			Handler:    _Social_DelComment_Handler,
		},
		{
			MethodName: "GetVideoCommentListById",
			Handler:    _Social_GetVideoCommentListById_Handler,
		},
		{
			MethodName: "GetCommentCountByVideoId",
			Handler:    _Social_GetCommentCountByVideoId_Handler,
		},
		{
			MethodName: "VideoLike",
			Handler:    _Social_VideoLike_Handler,
		},
		{
			MethodName: "VideoUnlike",
			Handler:    _Social_VideoUnlike_Handler,
		},
		{
			MethodName: "GetVideoLikedCountByVideoId",
			Handler:    _Social_GetVideoLikedCountByVideoId_Handler,
		},
		{
			MethodName: "GetUserLikeVideoIdList",
			Handler:    _Social_GetUserLikeVideoIdList_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _Social_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _Social_UnfollowUser_Handler,
		},
		{
			MethodName: "GetUserFollowerCount",
			Handler:    _Social_GetUserFollowerCount_Handler,
		},
		{
			MethodName: "GetUserFollowCount",
			Handler:    _Social_GetUserFollowCount_Handler,
		},
		{
			MethodName: "GetUserFollowIdList",
			Handler:    _Social_GetUserFollowIdList_Handler,
		},
		{
			MethodName: "GetUserFollowerIdList",
			Handler:    _Social_GetUserFollowerIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/social.proto",
}
