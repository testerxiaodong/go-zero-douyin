// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/likeRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/social/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockLikeDo is a mock of LikeDo interface.
type MockLikeDo struct {
	ctrl     *gomock.Controller
	recorder *MockLikeDoMockRecorder
}

// MockLikeDoMockRecorder is the mock recorder for MockLikeDo.
type MockLikeDoMockRecorder struct {
	mock *MockLikeDo
}

// NewMockLikeDo creates a new mock instance.
func NewMockLikeDo(ctrl *gomock.Controller) *MockLikeDo {
	mock := &MockLikeDo{ctrl: ctrl}
	mock.recorder = &MockLikeDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeDo) EXPECT() *MockLikeDoMockRecorder {
	return m.recorder
}

// DeleteLike mocks base method.
func (m *MockLikeDo) DeleteLike(ctx context.Context, like *model.Like) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, like)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockLikeDoMockRecorder) DeleteLike(ctx, like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockLikeDo)(nil).DeleteLike), ctx, like)
}

// GetLikeByVideoIdAndUserId mocks base method.
func (m *MockLikeDo) GetLikeByVideoIdAndUserId(ctx context.Context, videoId, userId int64) (*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeByVideoIdAndUserId", ctx, videoId, userId)
	ret0, _ := ret[0].(*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeByVideoIdAndUserId indicates an expected call of GetLikeByVideoIdAndUserId.
func (mr *MockLikeDoMockRecorder) GetLikeByVideoIdAndUserId(ctx, videoId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeByVideoIdAndUserId", reflect.TypeOf((*MockLikeDo)(nil).GetLikeByVideoIdAndUserId), ctx, videoId, userId)
}

// GetUserLikeVideoIdList mocks base method.
func (m *MockLikeDo) GetUserLikeVideoIdList(ctx context.Context, UserId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLikeVideoIdList", ctx, UserId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLikeVideoIdList indicates an expected call of GetUserLikeVideoIdList.
func (mr *MockLikeDoMockRecorder) GetUserLikeVideoIdList(ctx, UserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLikeVideoIdList", reflect.TypeOf((*MockLikeDo)(nil).GetUserLikeVideoIdList), ctx, UserId)
}

// GetVideoLikedByUserIdList mocks base method.
func (m *MockLikeDo) GetVideoLikedByUserIdList(ctx context.Context, videoId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoLikedByUserIdList", ctx, videoId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoLikedByUserIdList indicates an expected call of GetVideoLikedByUserIdList.
func (mr *MockLikeDoMockRecorder) GetVideoLikedByUserIdList(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoLikedByUserIdList", reflect.TypeOf((*MockLikeDo)(nil).GetVideoLikedByUserIdList), ctx, videoId)
}

// GetVideoLikedCount mocks base method.
func (m *MockLikeDo) GetVideoLikedCount(ctx context.Context, videoId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoLikedCount", ctx, videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoLikedCount indicates an expected call of GetVideoLikedCount.
func (mr *MockLikeDoMockRecorder) GetVideoLikedCount(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoLikedCount", reflect.TypeOf((*MockLikeDo)(nil).GetVideoLikedCount), ctx, videoId)
}

// InsertLike mocks base method.
func (m *MockLikeDo) InsertLike(ctx context.Context, user *model.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLike", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLike indicates an expected call of InsertLike.
func (mr *MockLikeDoMockRecorder) InsertLike(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLike", reflect.TypeOf((*MockLikeDo)(nil).InsertLike), ctx, user)
}
