// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/model/likeModel_gen.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	model "go-zero-douyin/apps/social/cmd/rpc/internal/model"
	reflect "reflect"

	squirrel "github.com/Masterminds/squirrel"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/zeromicro/go-zero/core/stores/sqlx"
)

// MocklikeModel is a mock of likeModel interface.
type MocklikeModel struct {
	ctrl     *gomock.Controller
	recorder *MocklikeModelMockRecorder
}

// MocklikeModelMockRecorder is the mock recorder for MocklikeModel.
type MocklikeModelMockRecorder struct {
	mock *MocklikeModel
}

// NewMocklikeModel creates a new mock instance.
func NewMocklikeModel(ctrl *gomock.Controller) *MocklikeModel {
	mock := &MocklikeModel{ctrl: ctrl}
	mock.recorder = &MocklikeModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklikeModel) EXPECT() *MocklikeModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MocklikeModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, session, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MocklikeModelMockRecorder) Delete(ctx, session, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MocklikeModel)(nil).Delete), ctx, session, id)
}

// DeleteSoft mocks base method.
func (m *MocklikeModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *model.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSoft", ctx, session, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSoft indicates an expected call of DeleteSoft.
func (mr *MocklikeModelMockRecorder) DeleteSoft(ctx, session, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSoft", reflect.TypeOf((*MocklikeModel)(nil).DeleteSoft), ctx, session, data)
}

// FindAll mocks base method.
func (m *MocklikeModel) FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, rowBuilder, orderBy)
	ret0, _ := ret[0].([]*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MocklikeModelMockRecorder) FindAll(ctx, rowBuilder, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MocklikeModel)(nil).FindAll), ctx, rowBuilder, orderBy)
}

// FindCount mocks base method.
func (m *MocklikeModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCount", ctx, countBuilder, field)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCount indicates an expected call of FindCount.
func (mr *MocklikeModelMockRecorder) FindCount(ctx, countBuilder, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCount", reflect.TypeOf((*MocklikeModel)(nil).FindCount), ctx, countBuilder, field)
}

// FindOne mocks base method.
func (m *MocklikeModel) FindOne(ctx context.Context, id int64) (*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MocklikeModelMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MocklikeModel)(nil).FindOne), ctx, id)
}

// FindOneByVideoIdUserId mocks base method.
func (m *MocklikeModel) FindOneByVideoIdUserId(ctx context.Context, videoId, userId int64) (*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByVideoIdUserId", ctx, videoId, userId)
	ret0, _ := ret[0].(*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByVideoIdUserId indicates an expected call of FindOneByVideoIdUserId.
func (mr *MocklikeModelMockRecorder) FindOneByVideoIdUserId(ctx, videoId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByVideoIdUserId", reflect.TypeOf((*MocklikeModel)(nil).FindOneByVideoIdUserId), ctx, videoId, userId)
}

// FindPageListByIdASC mocks base method.
func (m *MocklikeModel) FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPageListByIdASC", ctx, rowBuilder, preMaxId, pageSize)
	ret0, _ := ret[0].([]*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPageListByIdASC indicates an expected call of FindPageListByIdASC.
func (mr *MocklikeModelMockRecorder) FindPageListByIdASC(ctx, rowBuilder, preMaxId, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPageListByIdASC", reflect.TypeOf((*MocklikeModel)(nil).FindPageListByIdASC), ctx, rowBuilder, preMaxId, pageSize)
}

// FindPageListByIdDESC mocks base method.
func (m *MocklikeModel) FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPageListByIdDESC", ctx, rowBuilder, preMinId, pageSize)
	ret0, _ := ret[0].([]*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPageListByIdDESC indicates an expected call of FindPageListByIdDESC.
func (mr *MocklikeModelMockRecorder) FindPageListByIdDESC(ctx, rowBuilder, preMinId, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPageListByIdDESC", reflect.TypeOf((*MocklikeModel)(nil).FindPageListByIdDESC), ctx, rowBuilder, preMinId, pageSize)
}

// FindPageListByPage mocks base method.
func (m *MocklikeModel) FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPageListByPage", ctx, rowBuilder, page, pageSize, orderBy)
	ret0, _ := ret[0].([]*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPageListByPage indicates an expected call of FindPageListByPage.
func (mr *MocklikeModelMockRecorder) FindPageListByPage(ctx, rowBuilder, page, pageSize, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPageListByPage", reflect.TypeOf((*MocklikeModel)(nil).FindPageListByPage), ctx, rowBuilder, page, pageSize, orderBy)
}

// FindPageListByPageWithTotal mocks base method.
func (m *MocklikeModel) FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*model.Like, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPageListByPageWithTotal", ctx, rowBuilder, page, pageSize, orderBy)
	ret0, _ := ret[0].([]*model.Like)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPageListByPageWithTotal indicates an expected call of FindPageListByPageWithTotal.
func (mr *MocklikeModelMockRecorder) FindPageListByPageWithTotal(ctx, rowBuilder, page, pageSize, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPageListByPageWithTotal", reflect.TypeOf((*MocklikeModel)(nil).FindPageListByPageWithTotal), ctx, rowBuilder, page, pageSize, orderBy)
}

// FindSum mocks base method.
func (m *MocklikeModel) FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSum", ctx, sumBuilder, field)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSum indicates an expected call of FindSum.
func (mr *MocklikeModelMockRecorder) FindSum(ctx, sumBuilder, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSum", reflect.TypeOf((*MocklikeModel)(nil).FindSum), ctx, sumBuilder, field)
}

// Insert mocks base method.
func (m *MocklikeModel) Insert(ctx context.Context, session sqlx.Session, data *model.Like) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, session, data)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MocklikeModelMockRecorder) Insert(ctx, session, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MocklikeModel)(nil).Insert), ctx, session, data)
}

// SelectBuilder mocks base method.
func (m *MocklikeModel) SelectBuilder() squirrel.SelectBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBuilder")
	ret0, _ := ret[0].(squirrel.SelectBuilder)
	return ret0
}

// SelectBuilder indicates an expected call of SelectBuilder.
func (mr *MocklikeModelMockRecorder) SelectBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBuilder", reflect.TypeOf((*MocklikeModel)(nil).SelectBuilder))
}

// Trans mocks base method.
func (m *MocklikeModel) Trans(ctx context.Context, fn func(context.Context, sqlx.Session) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trans", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trans indicates an expected call of Trans.
func (mr *MocklikeModelMockRecorder) Trans(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trans", reflect.TypeOf((*MocklikeModel)(nil).Trans), ctx, fn)
}

// Update mocks base method.
func (m *MocklikeModel) Update(ctx context.Context, session sqlx.Session, data *model.Like) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, session, data)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MocklikeModelMockRecorder) Update(ctx, session, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocklikeModel)(nil).Update), ctx, session, data)
}

// UpdateWithVersion mocks base method.
func (m *MocklikeModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *model.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithVersion", ctx, session, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithVersion indicates an expected call of UpdateWithVersion.
func (mr *MocklikeModelMockRecorder) UpdateWithVersion(ctx, session, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithVersion", reflect.TypeOf((*MocklikeModel)(nil).UpdateWithVersion), ctx, session, data)
}
