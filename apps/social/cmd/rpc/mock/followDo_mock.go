// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/followRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/social/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockFollowDo is a mock of FollowDo interface.
type MockFollowDo struct {
	ctrl     *gomock.Controller
	recorder *MockFollowDoMockRecorder
}

// MockFollowDoMockRecorder is the mock recorder for MockFollowDo.
type MockFollowDoMockRecorder struct {
	mock *MockFollowDo
}

// NewMockFollowDo creates a new mock instance.
func NewMockFollowDo(ctrl *gomock.Controller) *MockFollowDo {
	mock := &MockFollowDo{ctrl: ctrl}
	mock.recorder = &MockFollowDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowDo) EXPECT() *MockFollowDoMockRecorder {
	return m.recorder
}

// DeleteFollow mocks base method.
func (m *MockFollowDo) DeleteFollow(ctx context.Context, follow *model.Follow) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollow", ctx, follow)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFollow indicates an expected call of DeleteFollow.
func (mr *MockFollowDoMockRecorder) DeleteFollow(ctx, follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollow", reflect.TypeOf((*MockFollowDo)(nil).DeleteFollow), ctx, follow)
}

// GetFollowByFollowerIdAndUserId mocks base method.
func (m *MockFollowDo) GetFollowByFollowerIdAndUserId(ctx context.Context, followerId, userId int64) (*model.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowByFollowerIdAndUserId", ctx, followerId, userId)
	ret0, _ := ret[0].(*model.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowByFollowerIdAndUserId indicates an expected call of GetFollowByFollowerIdAndUserId.
func (mr *MockFollowDoMockRecorder) GetFollowByFollowerIdAndUserId(ctx, followerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowByFollowerIdAndUserId", reflect.TypeOf((*MockFollowDo)(nil).GetFollowByFollowerIdAndUserId), ctx, followerId, userId)
}

// GetUserFollowCount mocks base method.
func (m *MockFollowDo) GetUserFollowCount(ctx context.Context, videoId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowCount", ctx, videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowCount indicates an expected call of GetUserFollowCount.
func (mr *MockFollowDoMockRecorder) GetUserFollowCount(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowCount", reflect.TypeOf((*MockFollowDo)(nil).GetUserFollowCount), ctx, videoId)
}

// GetUserFollowIdList mocks base method.
func (m *MockFollowDo) GetUserFollowIdList(ctx context.Context, followerId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowIdList", ctx, followerId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowIdList indicates an expected call of GetUserFollowIdList.
func (mr *MockFollowDoMockRecorder) GetUserFollowIdList(ctx, followerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowIdList", reflect.TypeOf((*MockFollowDo)(nil).GetUserFollowIdList), ctx, followerId)
}

// GetUserFollowerCount mocks base method.
func (m *MockFollowDo) GetUserFollowerCount(ctx context.Context, videoId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowerCount", ctx, videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowerCount indicates an expected call of GetUserFollowerCount.
func (mr *MockFollowDoMockRecorder) GetUserFollowerCount(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowerCount", reflect.TypeOf((*MockFollowDo)(nil).GetUserFollowerCount), ctx, videoId)
}

// GetUserFollowerIdList mocks base method.
func (m *MockFollowDo) GetUserFollowerIdList(ctx context.Context, userId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowerIdList", ctx, userId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowerIdList indicates an expected call of GetUserFollowerIdList.
func (mr *MockFollowDoMockRecorder) GetUserFollowerIdList(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowerIdList", reflect.TypeOf((*MockFollowDo)(nil).GetUserFollowerIdList), ctx, userId)
}

// InsertFollow mocks base method.
func (m *MockFollowDo) InsertFollow(ctx context.Context, user *model.Follow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFollow", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFollow indicates an expected call of InsertFollow.
func (mr *MockFollowDoMockRecorder) InsertFollow(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFollow", reflect.TypeOf((*MockFollowDo)(nil).InsertFollow), ctx, user)
}
