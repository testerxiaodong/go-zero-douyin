// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/commentRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/social/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockCommentDo is a mock of CommentDo interface.
type MockCommentDo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentDoMockRecorder
}

// MockCommentDoMockRecorder is the mock recorder for MockCommentDo.
type MockCommentDoMockRecorder struct {
	mock *MockCommentDo
}

// NewMockCommentDo creates a new mock instance.
func NewMockCommentDo(ctrl *gomock.Controller) *MockCommentDo {
	mock := &MockCommentDo{ctrl: ctrl}
	mock.recorder = &MockCommentDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentDo) EXPECT() *MockCommentDoMockRecorder {
	return m.recorder
}

// DeleteComment mocks base method.
func (m *MockCommentDo) DeleteComment(ctx context.Context, comment *model.Comment) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, comment)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentDoMockRecorder) DeleteComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentDo)(nil).DeleteComment), ctx, comment)
}

// GetCommentById mocks base method.
func (m *MockCommentDo) GetCommentById(ctx context.Context, userId int64) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentById", ctx, userId)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentById indicates an expected call of GetCommentById.
func (mr *MockCommentDoMockRecorder) GetCommentById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentById", reflect.TypeOf((*MockCommentDo)(nil).GetCommentById), ctx, userId)
}

// GetCommentCountByVideoId mocks base method.
func (m *MockCommentDo) GetCommentCountByVideoId(ctx context.Context, videoId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCountByVideoId", ctx, videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCountByVideoId indicates an expected call of GetCommentCountByVideoId.
func (mr *MockCommentDoMockRecorder) GetCommentCountByVideoId(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCountByVideoId", reflect.TypeOf((*MockCommentDo)(nil).GetCommentCountByVideoId), ctx, videoId)
}

// GetCommentListByVideoId mocks base method.
func (m *MockCommentDo) GetCommentListByVideoId(ctx context.Context, videoId int64) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentListByVideoId", ctx, videoId)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentListByVideoId indicates an expected call of GetCommentListByVideoId.
func (mr *MockCommentDoMockRecorder) GetCommentListByVideoId(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentListByVideoId", reflect.TypeOf((*MockCommentDo)(nil).GetCommentListByVideoId), ctx, videoId)
}

// InsertComment mocks base method.
func (m *MockCommentDo) InsertComment(ctx context.Context, user *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertComment", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertComment indicates an expected call of InsertComment.
func (mr *MockCommentDoMockRecorder) InsertComment(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertComment", reflect.TypeOf((*MockCommentDo)(nil).InsertComment), ctx, user)
}
