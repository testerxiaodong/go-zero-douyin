// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/social/social.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	social "go-zero-douyin/apps/social/cmd/rpc/social"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSocial is a mock of Social interface.
type MockSocial struct {
	ctrl     *gomock.Controller
	recorder *MockSocialMockRecorder
}

// MockSocialMockRecorder is the mock recorder for MockSocial.
type MockSocialMockRecorder struct {
	mock *MockSocial
}

// NewMockSocial creates a new mock instance.
func NewMockSocial(ctrl *gomock.Controller) *MockSocial {
	mock := &MockSocial{ctrl: ctrl}
	mock.recorder = &MockSocialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocial) EXPECT() *MockSocialMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockSocial) AddComment(ctx context.Context, in *social.AddCommentReq, opts ...grpc.CallOption) (*social.AddCommentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddComment", varargs...)
	ret0, _ := ret[0].(*social.AddCommentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockSocialMockRecorder) AddComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockSocial)(nil).AddComment), varargs...)
}

// DelComment mocks base method.
func (m *MockSocial) DelComment(ctx context.Context, in *social.DelCommentReq, opts ...grpc.CallOption) (*social.DelCommentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelComment", varargs...)
	ret0, _ := ret[0].(*social.DelCommentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelComment indicates an expected call of DelComment.
func (mr *MockSocialMockRecorder) DelComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelComment", reflect.TypeOf((*MockSocial)(nil).DelComment), varargs...)
}

// FollowUser mocks base method.
func (m *MockSocial) FollowUser(ctx context.Context, in *social.FollowUserReq, opts ...grpc.CallOption) (*social.FollowUserResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowUser", varargs...)
	ret0, _ := ret[0].(*social.FollowUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockSocialMockRecorder) FollowUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockSocial)(nil).FollowUser), varargs...)
}

// GetCommentCountByVideoId mocks base method.
func (m *MockSocial) GetCommentCountByVideoId(ctx context.Context, in *social.GetCommentCountByVideoIdReq, opts ...grpc.CallOption) (*social.GetCommentCountByVideoIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentCountByVideoId", varargs...)
	ret0, _ := ret[0].(*social.GetCommentCountByVideoIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCountByVideoId indicates an expected call of GetCommentCountByVideoId.
func (mr *MockSocialMockRecorder) GetCommentCountByVideoId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCountByVideoId", reflect.TypeOf((*MockSocial)(nil).GetCommentCountByVideoId), varargs...)
}

// GetUserFollowCount mocks base method.
func (m *MockSocial) GetUserFollowCount(ctx context.Context, in *social.GetUserFollowCountReq, opts ...grpc.CallOption) (*social.GetUserFollowCountResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFollowCount", varargs...)
	ret0, _ := ret[0].(*social.GetUserFollowCountResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowCount indicates an expected call of GetUserFollowCount.
func (mr *MockSocialMockRecorder) GetUserFollowCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowCount", reflect.TypeOf((*MockSocial)(nil).GetUserFollowCount), varargs...)
}

// GetUserFollowIdList mocks base method.
func (m *MockSocial) GetUserFollowIdList(ctx context.Context, in *social.GetUserFollowIdListReq, opts ...grpc.CallOption) (*social.GetUserFollowIdListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFollowIdList", varargs...)
	ret0, _ := ret[0].(*social.GetUserFollowIdListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowIdList indicates an expected call of GetUserFollowIdList.
func (mr *MockSocialMockRecorder) GetUserFollowIdList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowIdList", reflect.TypeOf((*MockSocial)(nil).GetUserFollowIdList), varargs...)
}

// GetUserFollowerCount mocks base method.
func (m *MockSocial) GetUserFollowerCount(ctx context.Context, in *social.GetUserFollowerCountReq, opts ...grpc.CallOption) (*social.GetUserFollowerCountResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFollowerCount", varargs...)
	ret0, _ := ret[0].(*social.GetUserFollowerCountResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowerCount indicates an expected call of GetUserFollowerCount.
func (mr *MockSocialMockRecorder) GetUserFollowerCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowerCount", reflect.TypeOf((*MockSocial)(nil).GetUserFollowerCount), varargs...)
}

// GetUserFollowerIdList mocks base method.
func (m *MockSocial) GetUserFollowerIdList(ctx context.Context, in *social.GetUserFollowerIdListReq, opts ...grpc.CallOption) (*social.GetUserFollowerIdListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFollowerIdList", varargs...)
	ret0, _ := ret[0].(*social.GetUserFollowerIdListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowerIdList indicates an expected call of GetUserFollowerIdList.
func (mr *MockSocialMockRecorder) GetUserFollowerIdList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowerIdList", reflect.TypeOf((*MockSocial)(nil).GetUserFollowerIdList), varargs...)
}

// GetUserLikeVideoIdList mocks base method.
func (m *MockSocial) GetUserLikeVideoIdList(ctx context.Context, in *social.GetUserLikeVideoIdListReq, opts ...grpc.CallOption) (*social.GetUserLikeVideoIdListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserLikeVideoIdList", varargs...)
	ret0, _ := ret[0].(*social.GetUserLikeVideoIdListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLikeVideoIdList indicates an expected call of GetUserLikeVideoIdList.
func (mr *MockSocialMockRecorder) GetUserLikeVideoIdList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLikeVideoIdList", reflect.TypeOf((*MockSocial)(nil).GetUserLikeVideoIdList), varargs...)
}

// GetVideoCommentListById mocks base method.
func (m *MockSocial) GetVideoCommentListById(ctx context.Context, in *social.GetCommentListByIdReq, opts ...grpc.CallOption) (*social.GetCommentListByIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVideoCommentListById", varargs...)
	ret0, _ := ret[0].(*social.GetCommentListByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoCommentListById indicates an expected call of GetVideoCommentListById.
func (mr *MockSocialMockRecorder) GetVideoCommentListById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoCommentListById", reflect.TypeOf((*MockSocial)(nil).GetVideoCommentListById), varargs...)
}

// GetVideoLikedCountByVideoId mocks base method.
func (m *MockSocial) GetVideoLikedCountByVideoId(ctx context.Context, in *social.GetVideoLikedCountByVideoIdReq, opts ...grpc.CallOption) (*social.GetVideoLikedCountByVideoIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVideoLikedCountByVideoId", varargs...)
	ret0, _ := ret[0].(*social.GetVideoLikedCountByVideoIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoLikedCountByVideoId indicates an expected call of GetVideoLikedCountByVideoId.
func (mr *MockSocialMockRecorder) GetVideoLikedCountByVideoId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoLikedCountByVideoId", reflect.TypeOf((*MockSocial)(nil).GetVideoLikedCountByVideoId), varargs...)
}

// UnfollowUser mocks base method.
func (m *MockSocial) UnfollowUser(ctx context.Context, in *social.UnfollowUserReq, opts ...grpc.CallOption) (*social.UnfollowUserResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnfollowUser", varargs...)
	ret0, _ := ret[0].(*social.UnfollowUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockSocialMockRecorder) UnfollowUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockSocial)(nil).UnfollowUser), varargs...)
}

// VideoLike mocks base method.
func (m *MockSocial) VideoLike(ctx context.Context, in *social.VideoLikeReq, opts ...grpc.CallOption) (*social.VideoLikeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VideoLike", varargs...)
	ret0, _ := ret[0].(*social.VideoLikeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VideoLike indicates an expected call of VideoLike.
func (mr *MockSocialMockRecorder) VideoLike(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VideoLike", reflect.TypeOf((*MockSocial)(nil).VideoLike), varargs...)
}

// VideoUnlike mocks base method.
func (m *MockSocial) VideoUnlike(ctx context.Context, in *social.VideoUnlikeReq, opts ...grpc.CallOption) (*social.VideoLikeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VideoUnlike", varargs...)
	ret0, _ := ret[0].(*social.VideoLikeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VideoUnlike indicates an expected call of VideoUnlike.
func (mr *MockSocialMockRecorder) VideoUnlike(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VideoUnlike", reflect.TypeOf((*MockSocial)(nil).VideoUnlike), varargs...)
}
