// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpc/pb/commentrpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Commentrpc_AddComment_FullMethodName               = "/pb.commentrpc/AddComment"
	Commentrpc_DelComment_FullMethodName               = "/pb.commentrpc/DelComment"
	Commentrpc_GetVideoCommentListById_FullMethodName  = "/pb.commentrpc/GetVideoCommentListById"
	Commentrpc_GetCommentCountByVideoId_FullMethodName = "/pb.commentrpc/GetCommentCountByVideoId"
)

// CommentrpcClient is the client API for Commentrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentrpcClient interface {
	AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error)
	GetVideoCommentListById(ctx context.Context, in *GetCommentListByIdReq, opts ...grpc.CallOption) (*GetCommentListByIdResp, error)
	GetCommentCountByVideoId(ctx context.Context, in *GetCommentCountByVideoIdReq, opts ...grpc.CallOption) (*GetCommentCountByVideoIdResp, error)
}

type commentrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentrpcClient(cc grpc.ClientConnInterface) CommentrpcClient {
	return &commentrpcClient{cc}
}

func (c *commentrpcClient) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, Commentrpc_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentrpcClient) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error) {
	out := new(DelCommentResp)
	err := c.cc.Invoke(ctx, Commentrpc_DelComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentrpcClient) GetVideoCommentListById(ctx context.Context, in *GetCommentListByIdReq, opts ...grpc.CallOption) (*GetCommentListByIdResp, error) {
	out := new(GetCommentListByIdResp)
	err := c.cc.Invoke(ctx, Commentrpc_GetVideoCommentListById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentrpcClient) GetCommentCountByVideoId(ctx context.Context, in *GetCommentCountByVideoIdReq, opts ...grpc.CallOption) (*GetCommentCountByVideoIdResp, error) {
	out := new(GetCommentCountByVideoIdResp)
	err := c.cc.Invoke(ctx, Commentrpc_GetCommentCountByVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentrpcServer is the server API for Commentrpc service.
// All implementations must embed UnimplementedCommentrpcServer
// for forward compatibility
type CommentrpcServer interface {
	AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error)
	DelComment(context.Context, *DelCommentReq) (*DelCommentResp, error)
	GetVideoCommentListById(context.Context, *GetCommentListByIdReq) (*GetCommentListByIdResp, error)
	GetCommentCountByVideoId(context.Context, *GetCommentCountByVideoIdReq) (*GetCommentCountByVideoIdResp, error)
	mustEmbedUnimplementedCommentrpcServer()
}

// UnimplementedCommentrpcServer must be embedded to have forward compatible implementations.
type UnimplementedCommentrpcServer struct {
}

func (UnimplementedCommentrpcServer) AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentrpcServer) DelComment(context.Context, *DelCommentReq) (*DelCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelComment not implemented")
}
func (UnimplementedCommentrpcServer) GetVideoCommentListById(context.Context, *GetCommentListByIdReq) (*GetCommentListByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoCommentListById not implemented")
}
func (UnimplementedCommentrpcServer) GetCommentCountByVideoId(context.Context, *GetCommentCountByVideoIdReq) (*GetCommentCountByVideoIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountByVideoId not implemented")
}
func (UnimplementedCommentrpcServer) mustEmbedUnimplementedCommentrpcServer() {}

// UnsafeCommentrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentrpcServer will
// result in compilation errors.
type UnsafeCommentrpcServer interface {
	mustEmbedUnimplementedCommentrpcServer()
}

func RegisterCommentrpcServer(s grpc.ServiceRegistrar, srv CommentrpcServer) {
	s.RegisterService(&Commentrpc_ServiceDesc, srv)
}

func _Commentrpc_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentrpcServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commentrpc_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentrpcServer).AddComment(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commentrpc_DelComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentrpcServer).DelComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commentrpc_DelComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentrpcServer).DelComment(ctx, req.(*DelCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commentrpc_GetVideoCommentListById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentrpcServer).GetVideoCommentListById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commentrpc_GetVideoCommentListById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentrpcServer).GetVideoCommentListById(ctx, req.(*GetCommentListByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commentrpc_GetCommentCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentrpcServer).GetCommentCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commentrpc_GetCommentCountByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentrpcServer).GetCommentCountByVideoId(ctx, req.(*GetCommentCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Commentrpc_ServiceDesc is the grpc.ServiceDesc for Commentrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commentrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.commentrpc",
	HandlerType: (*CommentrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _Commentrpc_AddComment_Handler,
		},
		{
			MethodName: "DelComment",
			Handler:    _Commentrpc_DelComment_Handler,
		},
		{
			MethodName: "GetVideoCommentListById",
			Handler:    _Commentrpc_GetVideoCommentListById_Handler,
		},
		{
			MethodName: "GetCommentCountByVideoId",
			Handler:    _Commentrpc_GetCommentCountByVideoId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/commentrpc.proto",
}
