// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpc/pb/likerpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Likerpc_VideoLike_FullMethodName                  = "/pb.likerpc/VideoLike"
	Likerpc_VideoUnlike_FullMethodName                = "/pb.likerpc/VideoUnlike"
	Likerpc_GetVideoLikeCountByVideoId_FullMethodName = "/pb.likerpc/GetVideoLikeCountByVideoId"
	Likerpc_GetUserLikeVideoIdList_FullMethodName     = "/pb.likerpc/GetUserLikeVideoIdList"
)

// LikerpcClient is the client API for Likerpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikerpcClient interface {
	VideoLike(ctx context.Context, in *VideoLikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error)
	VideoUnlike(ctx context.Context, in *VideoUnlikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error)
	GetVideoLikeCountByVideoId(ctx context.Context, in *GetVideoLikeCountByVideoIdReq, opts ...grpc.CallOption) (*GetVideoLikeCountByVideoIdResp, error)
	GetUserLikeVideoIdList(ctx context.Context, in *GetUserLikeVideoIdListReq, opts ...grpc.CallOption) (*GetUserLikeVideoIdListResp, error)
}

type likerpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLikerpcClient(cc grpc.ClientConnInterface) LikerpcClient {
	return &likerpcClient{cc}
}

func (c *likerpcClient) VideoLike(ctx context.Context, in *VideoLikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error) {
	out := new(VideoLikeResp)
	err := c.cc.Invoke(ctx, Likerpc_VideoLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likerpcClient) VideoUnlike(ctx context.Context, in *VideoUnlikeReq, opts ...grpc.CallOption) (*VideoLikeResp, error) {
	out := new(VideoLikeResp)
	err := c.cc.Invoke(ctx, Likerpc_VideoUnlike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likerpcClient) GetVideoLikeCountByVideoId(ctx context.Context, in *GetVideoLikeCountByVideoIdReq, opts ...grpc.CallOption) (*GetVideoLikeCountByVideoIdResp, error) {
	out := new(GetVideoLikeCountByVideoIdResp)
	err := c.cc.Invoke(ctx, Likerpc_GetVideoLikeCountByVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likerpcClient) GetUserLikeVideoIdList(ctx context.Context, in *GetUserLikeVideoIdListReq, opts ...grpc.CallOption) (*GetUserLikeVideoIdListResp, error) {
	out := new(GetUserLikeVideoIdListResp)
	err := c.cc.Invoke(ctx, Likerpc_GetUserLikeVideoIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikerpcServer is the server API for Likerpc service.
// All implementations must embed UnimplementedLikerpcServer
// for forward compatibility
type LikerpcServer interface {
	VideoLike(context.Context, *VideoLikeReq) (*VideoLikeResp, error)
	VideoUnlike(context.Context, *VideoUnlikeReq) (*VideoLikeResp, error)
	GetVideoLikeCountByVideoId(context.Context, *GetVideoLikeCountByVideoIdReq) (*GetVideoLikeCountByVideoIdResp, error)
	GetUserLikeVideoIdList(context.Context, *GetUserLikeVideoIdListReq) (*GetUserLikeVideoIdListResp, error)
	mustEmbedUnimplementedLikerpcServer()
}

// UnimplementedLikerpcServer must be embedded to have forward compatible implementations.
type UnimplementedLikerpcServer struct {
}

func (UnimplementedLikerpcServer) VideoLike(context.Context, *VideoLikeReq) (*VideoLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoLike not implemented")
}
func (UnimplementedLikerpcServer) VideoUnlike(context.Context, *VideoUnlikeReq) (*VideoLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUnlike not implemented")
}
func (UnimplementedLikerpcServer) GetVideoLikeCountByVideoId(context.Context, *GetVideoLikeCountByVideoIdReq) (*GetVideoLikeCountByVideoIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoLikeCountByVideoId not implemented")
}
func (UnimplementedLikerpcServer) GetUserLikeVideoIdList(context.Context, *GetUserLikeVideoIdListReq) (*GetUserLikeVideoIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikeVideoIdList not implemented")
}
func (UnimplementedLikerpcServer) mustEmbedUnimplementedLikerpcServer() {}

// UnsafeLikerpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikerpcServer will
// result in compilation errors.
type UnsafeLikerpcServer interface {
	mustEmbedUnimplementedLikerpcServer()
}

func RegisterLikerpcServer(s grpc.ServiceRegistrar, srv LikerpcServer) {
	s.RegisterService(&Likerpc_ServiceDesc, srv)
}

func _Likerpc_VideoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikerpcServer).VideoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Likerpc_VideoLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikerpcServer).VideoLike(ctx, req.(*VideoLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Likerpc_VideoUnlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUnlikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikerpcServer).VideoUnlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Likerpc_VideoUnlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikerpcServer).VideoUnlike(ctx, req.(*VideoUnlikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Likerpc_GetVideoLikeCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoLikeCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikerpcServer).GetVideoLikeCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Likerpc_GetVideoLikeCountByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikerpcServer).GetVideoLikeCountByVideoId(ctx, req.(*GetVideoLikeCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Likerpc_GetUserLikeVideoIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLikeVideoIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikerpcServer).GetUserLikeVideoIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Likerpc_GetUserLikeVideoIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikerpcServer).GetUserLikeVideoIdList(ctx, req.(*GetUserLikeVideoIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Likerpc_ServiceDesc is the grpc.ServiceDesc for Likerpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Likerpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.likerpc",
	HandlerType: (*LikerpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoLike",
			Handler:    _Likerpc_VideoLike_Handler,
		},
		{
			MethodName: "VideoUnlike",
			Handler:    _Likerpc_VideoUnlike_Handler,
		},
		{
			MethodName: "GetVideoLikeCountByVideoId",
			Handler:    _Likerpc_GetVideoLikeCountByVideoId_Handler,
		},
		{
			MethodName: "GetUserLikeVideoIdList",
			Handler:    _Likerpc_GetUserLikeVideoIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/likerpc.proto",
}
