// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/userRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/user/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockUserDo is a mock of UserDo interface.
type MockUserDo struct {
	ctrl     *gomock.Controller
	recorder *MockUserDoMockRecorder
}

// MockUserDoMockRecorder is the mock recorder for MockUserDo.
type MockUserDoMockRecorder struct {
	mock *MockUserDo
}

// NewMockUserDo creates a new mock instance.
func NewMockUserDo(ctrl *gomock.Controller) *MockUserDo {
	mock := &MockUserDo{ctrl: ctrl}
	mock.recorder = &MockUserDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDo) EXPECT() *MockUserDoMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserDo) GetUserById(ctx context.Context, userId int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserDoMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserDo)(nil).GetUserById), ctx, userId)
}

// GetUserByUsername mocks base method.
func (m *MockUserDo) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserDoMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserDo)(nil).GetUserByUsername), ctx, username)
}

// InsertUser mocks base method.
func (m *MockUserDo) InsertUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserDoMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserDo)(nil).InsertUser), ctx, user)
}

// UpdateUserInfo mocks base method.
func (m *MockUserDo) UpdateUserInfo(ctx context.Context, user *model.User, userId int64) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, user, userId)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserDoMockRecorder) UpdateUserInfo(ctx, user, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserDo)(nil).UpdateUserInfo), ctx, user, userId)
}
