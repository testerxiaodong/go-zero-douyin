// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/sectionRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/video/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockSectionDo is a mock of SectionDo interface.
type MockSectionDo struct {
	ctrl     *gomock.Controller
	recorder *MockSectionDoMockRecorder
}

// MockSectionDoMockRecorder is the mock recorder for MockSectionDo.
type MockSectionDoMockRecorder struct {
	mock *MockSectionDo
}

// NewMockSectionDo creates a new mock instance.
func NewMockSectionDo(ctrl *gomock.Controller) *MockSectionDo {
	mock := &MockSectionDo{ctrl: ctrl}
	mock.recorder = &MockSectionDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSectionDo) EXPECT() *MockSectionDoMockRecorder {
	return m.recorder
}

// DeleteSection mocks base method.
func (m *MockSectionDo) DeleteSection(ctx context.Context, section *model.Section) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSection", ctx, section)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSection indicates an expected call of DeleteSection.
func (mr *MockSectionDoMockRecorder) DeleteSection(ctx, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSection", reflect.TypeOf((*MockSectionDo)(nil).DeleteSection), ctx, section)
}

// GetAllSections mocks base method.
func (m *MockSectionDo) GetAllSections(ctx context.Context) ([]*model.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSections", ctx)
	ret0, _ := ret[0].([]*model.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSections indicates an expected call of GetAllSections.
func (mr *MockSectionDoMockRecorder) GetAllSections(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSections", reflect.TypeOf((*MockSectionDo)(nil).GetAllSections), ctx)
}

// GetSectionById mocks base method.
func (m *MockSectionDo) GetSectionById(ctx context.Context, sectionId int64) (*model.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionById", ctx, sectionId)
	ret0, _ := ret[0].(*model.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionById indicates an expected call of GetSectionById.
func (mr *MockSectionDoMockRecorder) GetSectionById(ctx, sectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionById", reflect.TypeOf((*MockSectionDo)(nil).GetSectionById), ctx, sectionId)
}

// GetSectionByName mocks base method.
func (m *MockSectionDo) GetSectionByName(ctx context.Context, name string) (*model.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionByName", ctx, name)
	ret0, _ := ret[0].(*model.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionByName indicates an expected call of GetSectionByName.
func (mr *MockSectionDoMockRecorder) GetSectionByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionByName", reflect.TypeOf((*MockSectionDo)(nil).GetSectionByName), ctx, name)
}

// InsertSection mocks base method.
func (m *MockSectionDo) InsertSection(ctx context.Context, section *model.Section) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSection", ctx, section)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSection indicates an expected call of InsertSection.
func (mr *MockSectionDoMockRecorder) InsertSection(ctx, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSection", reflect.TypeOf((*MockSectionDo)(nil).InsertSection), ctx, section)
}
