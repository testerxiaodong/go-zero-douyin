// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/videoRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/video/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockVideoDo is a mock of VideoDo interface.
type MockVideoDo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoDoMockRecorder
}

// MockVideoDoMockRecorder is the mock recorder for MockVideoDo.
type MockVideoDoMockRecorder struct {
	mock *MockVideoDo
}

// NewMockVideoDo creates a new mock instance.
func NewMockVideoDo(ctrl *gomock.Controller) *MockVideoDo {
	mock := &MockVideoDo{ctrl: ctrl}
	mock.recorder = &MockVideoDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoDo) EXPECT() *MockVideoDoMockRecorder {
	return m.recorder
}

// DeleteVideo mocks base method.
func (m *MockVideoDo) DeleteVideo(ctx context.Context, video *model.Video) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideo", ctx, video)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockVideoDoMockRecorder) DeleteVideo(ctx, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockVideoDo)(nil).DeleteVideo), ctx, video)
}

// GetAllVideo mocks base method.
func (m *MockVideoDo) GetAllVideo(ctx context.Context) ([]*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVideo", ctx)
	ret0, _ := ret[0].([]*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVideo indicates an expected call of GetAllVideo.
func (mr *MockVideoDoMockRecorder) GetAllVideo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVideo", reflect.TypeOf((*MockVideoDo)(nil).GetAllVideo), ctx)
}

// GetVideoById mocks base method.
func (m *MockVideoDo) GetVideoById(ctx context.Context, videoId int64) (*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", ctx, videoId)
	ret0, _ := ret[0].(*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoDoMockRecorder) GetVideoById(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoDo)(nil).GetVideoById), ctx, videoId)
}

// GetVideoListByTimeStampAndSectionId mocks base method.
func (m *MockVideoDo) GetVideoListByTimeStampAndSectionId(ctx context.Context, timestamp, sectionId int64) ([]*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoListByTimeStampAndSectionId", ctx, timestamp, sectionId)
	ret0, _ := ret[0].([]*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoListByTimeStampAndSectionId indicates an expected call of GetVideoListByTimeStampAndSectionId.
func (mr *MockVideoDoMockRecorder) GetVideoListByTimeStampAndSectionId(ctx, timestamp, sectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoListByTimeStampAndSectionId", reflect.TypeOf((*MockVideoDo)(nil).GetVideoListByTimeStampAndSectionId), ctx, timestamp, sectionId)
}

// GetVideoListByUserId mocks base method.
func (m *MockVideoDo) GetVideoListByUserId(ctx context.Context, userId int64) ([]*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoListByUserId", ctx, userId)
	ret0, _ := ret[0].([]*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoListByUserId indicates an expected call of GetVideoListByUserId.
func (mr *MockVideoDoMockRecorder) GetVideoListByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoListByUserId", reflect.TypeOf((*MockVideoDo)(nil).GetVideoListByUserId), ctx, userId)
}

// InsertVideo mocks base method.
func (m *MockVideoDo) InsertVideo(ctx context.Context, video *model.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVideo", ctx, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVideo indicates an expected call of InsertVideo.
func (mr *MockVideoDoMockRecorder) InsertVideo(ctx, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVideo", reflect.TypeOf((*MockVideoDo)(nil).InsertVideo), ctx, video)
}
