// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/video/video.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	video "go-zero-douyin/apps/video/cmd/rpc/video"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVideo is a mock of Video interface.
type MockVideo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoMockRecorder
}

// MockVideoMockRecorder is the mock recorder for MockVideo.
type MockVideoMockRecorder struct {
	mock *MockVideo
}

// NewMockVideo creates a new mock instance.
func NewMockVideo(ctrl *gomock.Controller) *MockVideo {
	mock := &MockVideo{ctrl: ctrl}
	mock.recorder = &MockVideoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideo) EXPECT() *MockVideoMockRecorder {
	return m.recorder
}

// DeleteVideo mocks base method.
func (m *MockVideo) DeleteVideo(ctx context.Context, in *video.DeleteVideoReq, opts ...grpc.CallOption) (*video.DeleteVideoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVideo", varargs...)
	ret0, _ := ret[0].(*video.DeleteVideoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockVideoMockRecorder) DeleteVideo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockVideo)(nil).DeleteVideo), varargs...)
}

// GetVideoById mocks base method.
func (m *MockVideo) GetVideoById(ctx context.Context, in *video.GetVideoByIdReq, opts ...grpc.CallOption) (*video.GetVideoByIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVideoById", varargs...)
	ret0, _ := ret[0].(*video.GetVideoByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoMockRecorder) GetVideoById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideo)(nil).GetVideoById), varargs...)
}

// PublishVideo mocks base method.
func (m *MockVideo) PublishVideo(ctx context.Context, in *video.PublishVideoReq, opts ...grpc.CallOption) (*video.PublishVideoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishVideo", varargs...)
	ret0, _ := ret[0].(*video.PublishVideoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishVideo indicates an expected call of PublishVideo.
func (mr *MockVideoMockRecorder) PublishVideo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVideo", reflect.TypeOf((*MockVideo)(nil).PublishVideo), varargs...)
}

// UserVideoList mocks base method.
func (m *MockVideo) UserVideoList(ctx context.Context, in *video.UserVideoListReq, opts ...grpc.CallOption) (*video.UserVideoListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserVideoList", varargs...)
	ret0, _ := ret[0].(*video.UserVideoListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserVideoList indicates an expected call of UserVideoList.
func (mr *MockVideoMockRecorder) UserVideoList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserVideoList", reflect.TypeOf((*MockVideo)(nil).UserVideoList), varargs...)
}

// VideoFeed mocks base method.
func (m *MockVideo) VideoFeed(ctx context.Context, in *video.VideoFeedReq, opts ...grpc.CallOption) (*video.VideoFeedResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VideoFeed", varargs...)
	ret0, _ := ret[0].(*video.VideoFeedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VideoFeed indicates an expected call of VideoFeed.
func (mr *MockVideoMockRecorder) VideoFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VideoFeed", reflect.TypeOf((*MockVideo)(nil).VideoFeed), varargs...)
}
