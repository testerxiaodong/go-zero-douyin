// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/internal/dao/tagRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-zero-douyin/apps/video/cmd/rpc/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
)

// MockTagDo is a mock of TagDo interface.
type MockTagDo struct {
	ctrl     *gomock.Controller
	recorder *MockTagDoMockRecorder
}

// MockTagDoMockRecorder is the mock recorder for MockTagDo.
type MockTagDoMockRecorder struct {
	mock *MockTagDo
}

// NewMockTagDo creates a new mock instance.
func NewMockTagDo(ctrl *gomock.Controller) *MockTagDo {
	mock := &MockTagDo{ctrl: ctrl}
	mock.recorder = &MockTagDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagDo) EXPECT() *MockTagDoMockRecorder {
	return m.recorder
}

// DeleteTag mocks base method.
func (m *MockTagDo) DeleteTag(ctx context.Context, tag *model.Tag) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, tag)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagDoMockRecorder) DeleteTag(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagDo)(nil).DeleteTag), ctx, tag)
}

// GetAllTags mocks base method.
func (m *MockTagDo) GetAllTags(ctx context.Context) ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagDoMockRecorder) GetAllTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagDo)(nil).GetAllTags), ctx)
}

// GetTagById mocks base method.
func (m *MockTagDo) GetTagById(ctx context.Context, tagId int64) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, tagId)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagDoMockRecorder) GetTagById(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagDo)(nil).GetTagById), ctx, tagId)
}

// GetTagByName mocks base method.
func (m *MockTagDo) GetTagByName(ctx context.Context, name string) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", ctx, name)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockTagDoMockRecorder) GetTagByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockTagDo)(nil).GetTagByName), ctx, name)
}

// InsertTag mocks base method.
func (m *MockTagDo) InsertTag(ctx context.Context, tag *model.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTag", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTag indicates an expected call of InsertTag.
func (mr *MockTagDoMockRecorder) InsertTag(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTag", reflect.TypeOf((*MockTagDo)(nil).InsertTag), ctx, tag)
}
