// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpc/pb/video.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Video_PublishVideo_FullMethodName   = "/pb.video/PublishVideo"
	Video_VideoFeed_FullMethodName      = "/pb.video/VideoFeed"
	Video_UserVideoList_FullMethodName  = "/pb.video/UserVideoList"
	Video_GetAllVideo_FullMethodName    = "/pb.video/GetAllVideo"
	Video_DeleteVideo_FullMethodName    = "/pb.video/DeleteVideo"
	Video_GetVideoById_FullMethodName   = "/pb.video/GetVideoById"
	Video_AddSection_FullMethodName     = "/pb.video/AddSection"
	Video_DelSection_FullMethodName     = "/pb.video/DelSection"
	Video_GetSectionById_FullMethodName = "/pb.video/GetSectionById"
	Video_GetAllSection_FullMethodName  = "/pb.video/GetAllSection"
	Video_AddTag_FullMethodName         = "/pb.video/AddTag"
	Video_DelTag_FullMethodName         = "/pb.video/DelTag"
	Video_GetTagById_FullMethodName     = "/pb.video/GetTagById"
	Video_GetAllTag_FullMethodName      = "/pb.video/GetAllTag"
)

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	// 视频相关功能
	PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error)
	VideoFeed(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error)
	UserVideoList(ctx context.Context, in *UserVideoListReq, opts ...grpc.CallOption) (*UserVideoListResp, error)
	GetAllVideo(ctx context.Context, in *GetAllVideoReq, opts ...grpc.CallOption) (*GetAllVideoResp, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*DeleteVideoResp, error)
	GetVideoById(ctx context.Context, in *GetVideoByIdReq, opts ...grpc.CallOption) (*GetVideoByIdResp, error)
	// 分区相关功能
	AddSection(ctx context.Context, in *AddSectionReq, opts ...grpc.CallOption) (*AddSectionResp, error)
	DelSection(ctx context.Context, in *DelSectionReq, opts ...grpc.CallOption) (*DelSectionResp, error)
	GetSectionById(ctx context.Context, in *GetSectionByIdReq, opts ...grpc.CallOption) (*GetSectionByIdResp, error)
	GetAllSection(ctx context.Context, in *GetAllSectionReq, opts ...grpc.CallOption) (*GetAllSectionResp, error)
	// 标签相关功能
	AddTag(ctx context.Context, in *AddTagReq, opts ...grpc.CallOption) (*AddTagResp, error)
	DelTag(ctx context.Context, in *DelTagReq, opts ...grpc.CallOption) (*DelTagResp, error)
	GetTagById(ctx context.Context, in *GetTagByIdReq, opts ...grpc.CallOption) (*GetTagByIdResp, error)
	GetAllTag(ctx context.Context, in *GetAllTagReq, opts ...grpc.CallOption) (*GetAllTagResp, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error) {
	out := new(PublishVideoResp)
	err := c.cc.Invoke(ctx, Video_PublishVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) VideoFeed(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error) {
	out := new(VideoFeedResp)
	err := c.cc.Invoke(ctx, Video_VideoFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) UserVideoList(ctx context.Context, in *UserVideoListReq, opts ...grpc.CallOption) (*UserVideoListResp, error) {
	out := new(UserVideoListResp)
	err := c.cc.Invoke(ctx, Video_UserVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetAllVideo(ctx context.Context, in *GetAllVideoReq, opts ...grpc.CallOption) (*GetAllVideoResp, error) {
	out := new(GetAllVideoResp)
	err := c.cc.Invoke(ctx, Video_GetAllVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*DeleteVideoResp, error) {
	out := new(DeleteVideoResp)
	err := c.cc.Invoke(ctx, Video_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoById(ctx context.Context, in *GetVideoByIdReq, opts ...grpc.CallOption) (*GetVideoByIdResp, error) {
	out := new(GetVideoByIdResp)
	err := c.cc.Invoke(ctx, Video_GetVideoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) AddSection(ctx context.Context, in *AddSectionReq, opts ...grpc.CallOption) (*AddSectionResp, error) {
	out := new(AddSectionResp)
	err := c.cc.Invoke(ctx, Video_AddSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) DelSection(ctx context.Context, in *DelSectionReq, opts ...grpc.CallOption) (*DelSectionResp, error) {
	out := new(DelSectionResp)
	err := c.cc.Invoke(ctx, Video_DelSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetSectionById(ctx context.Context, in *GetSectionByIdReq, opts ...grpc.CallOption) (*GetSectionByIdResp, error) {
	out := new(GetSectionByIdResp)
	err := c.cc.Invoke(ctx, Video_GetSectionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetAllSection(ctx context.Context, in *GetAllSectionReq, opts ...grpc.CallOption) (*GetAllSectionResp, error) {
	out := new(GetAllSectionResp)
	err := c.cc.Invoke(ctx, Video_GetAllSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) AddTag(ctx context.Context, in *AddTagReq, opts ...grpc.CallOption) (*AddTagResp, error) {
	out := new(AddTagResp)
	err := c.cc.Invoke(ctx, Video_AddTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) DelTag(ctx context.Context, in *DelTagReq, opts ...grpc.CallOption) (*DelTagResp, error) {
	out := new(DelTagResp)
	err := c.cc.Invoke(ctx, Video_DelTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetTagById(ctx context.Context, in *GetTagByIdReq, opts ...grpc.CallOption) (*GetTagByIdResp, error) {
	out := new(GetTagByIdResp)
	err := c.cc.Invoke(ctx, Video_GetTagById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetAllTag(ctx context.Context, in *GetAllTagReq, opts ...grpc.CallOption) (*GetAllTagResp, error) {
	out := new(GetAllTagResp)
	err := c.cc.Invoke(ctx, Video_GetAllTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	// 视频相关功能
	PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoResp, error)
	VideoFeed(context.Context, *VideoFeedReq) (*VideoFeedResp, error)
	UserVideoList(context.Context, *UserVideoListReq) (*UserVideoListResp, error)
	GetAllVideo(context.Context, *GetAllVideoReq) (*GetAllVideoResp, error)
	DeleteVideo(context.Context, *DeleteVideoReq) (*DeleteVideoResp, error)
	GetVideoById(context.Context, *GetVideoByIdReq) (*GetVideoByIdResp, error)
	// 分区相关功能
	AddSection(context.Context, *AddSectionReq) (*AddSectionResp, error)
	DelSection(context.Context, *DelSectionReq) (*DelSectionResp, error)
	GetSectionById(context.Context, *GetSectionByIdReq) (*GetSectionByIdResp, error)
	GetAllSection(context.Context, *GetAllSectionReq) (*GetAllSectionResp, error)
	// 标签相关功能
	AddTag(context.Context, *AddTagReq) (*AddTagResp, error)
	DelTag(context.Context, *DelTagReq) (*DelTagResp, error)
	GetTagById(context.Context, *GetTagByIdReq) (*GetTagByIdResp, error)
	GetAllTag(context.Context, *GetAllTagReq) (*GetAllTagResp, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServer) VideoFeed(context.Context, *VideoFeedReq) (*VideoFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFeed not implemented")
}
func (UnimplementedVideoServer) UserVideoList(context.Context, *UserVideoListReq) (*UserVideoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVideoList not implemented")
}
func (UnimplementedVideoServer) GetAllVideo(context.Context, *GetAllVideoReq) (*GetAllVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVideo not implemented")
}
func (UnimplementedVideoServer) DeleteVideo(context.Context, *DeleteVideoReq) (*DeleteVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoServer) GetVideoById(context.Context, *GetVideoByIdReq) (*GetVideoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoById not implemented")
}
func (UnimplementedVideoServer) AddSection(context.Context, *AddSectionReq) (*AddSectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSection not implemented")
}
func (UnimplementedVideoServer) DelSection(context.Context, *DelSectionReq) (*DelSectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSection not implemented")
}
func (UnimplementedVideoServer) GetSectionById(context.Context, *GetSectionByIdReq) (*GetSectionByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionById not implemented")
}
func (UnimplementedVideoServer) GetAllSection(context.Context, *GetAllSectionReq) (*GetAllSectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSection not implemented")
}
func (UnimplementedVideoServer) AddTag(context.Context, *AddTagReq) (*AddTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedVideoServer) DelTag(context.Context, *DelTagReq) (*DelTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTag not implemented")
}
func (UnimplementedVideoServer) GetTagById(context.Context, *GetTagByIdReq) (*GetTagByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagById not implemented")
}
func (UnimplementedVideoServer) GetAllTag(context.Context, *GetAllTagReq) (*GetAllTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTag not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).PublishVideo(ctx, req.(*PublishVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_VideoFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).VideoFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_VideoFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).VideoFeed(ctx, req.(*VideoFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_UserVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVideoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).UserVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_UserVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).UserVideoList(ctx, req.(*UserVideoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetAllVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetAllVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetAllVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetAllVideo(ctx, req.(*GetAllVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).DeleteVideo(ctx, req.(*DeleteVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoById(ctx, req.(*GetVideoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_AddSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).AddSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_AddSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).AddSection(ctx, req.(*AddSectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_DelSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).DelSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_DelSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).DelSection(ctx, req.(*DelSectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetSectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetSectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetSectionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetSectionById(ctx, req.(*GetSectionByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetAllSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetAllSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetAllSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetAllSection(ctx, req.(*GetAllSectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).AddTag(ctx, req.(*AddTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_DelTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).DelTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_DelTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).DelTag(ctx, req.(*DelTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetTagById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetTagById(ctx, req.(*GetTagByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetAllTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetAllTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetAllTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetAllTag(ctx, req.(*GetAllTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishVideo",
			Handler:    _Video_PublishVideo_Handler,
		},
		{
			MethodName: "VideoFeed",
			Handler:    _Video_VideoFeed_Handler,
		},
		{
			MethodName: "UserVideoList",
			Handler:    _Video_UserVideoList_Handler,
		},
		{
			MethodName: "GetAllVideo",
			Handler:    _Video_GetAllVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _Video_DeleteVideo_Handler,
		},
		{
			MethodName: "GetVideoById",
			Handler:    _Video_GetVideoById_Handler,
		},
		{
			MethodName: "AddSection",
			Handler:    _Video_AddSection_Handler,
		},
		{
			MethodName: "DelSection",
			Handler:    _Video_DelSection_Handler,
		},
		{
			MethodName: "GetSectionById",
			Handler:    _Video_GetSectionById_Handler,
		},
		{
			MethodName: "GetAllSection",
			Handler:    _Video_GetAllSection_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Video_AddTag_Handler,
		},
		{
			MethodName: "DelTag",
			Handler:    _Video_DelTag_Handler,
		},
		{
			MethodName: "GetTagById",
			Handler:    _Video_GetTagById_Handler,
		},
		{
			MethodName: "GetAllTag",
			Handler:    _Video_GetAllTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/video.proto",
}
