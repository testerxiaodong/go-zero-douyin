// Code generated by goctl. DO NOT EDIT.
// Source: videorpc.proto

package videorpc

import (
	"context"

	"go-zero-douyin/apps/video/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PublishVideoReq  = pb.PublishVideoReq
	PublishVideoResp = pb.PublishVideoResp
	Video            = pb.Video
	VideoFeedReq     = pb.VideoFeedReq
	VideoFeedResp    = pb.VideoFeedResp

	Videorpc interface {
		PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error)
		VideoFeed(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error)
	}

	defaultVideorpc struct {
		cli zrpc.Client
	}
)

func NewVideorpc(cli zrpc.Client) Videorpc {
	return &defaultVideorpc{
		cli: cli,
	}
}

func (m *defaultVideorpc) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error) {
	client := pb.NewVideorpcClient(m.cli.Conn())
	return client.PublishVideo(ctx, in, opts...)
}

func (m *defaultVideorpc) VideoFeed(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error) {
	client := pb.NewVideorpcClient(m.cli.Conn())
	return client.VideoFeed(ctx, in, opts...)
}
