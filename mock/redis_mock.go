// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/cache/redis.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/zeromicro/go-zero/core/stores/redis"
)

// MockRedisCache is a mock of RedisCache interface.
type MockRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCacheMockRecorder
}

// MockRedisCacheMockRecorder is the mock recorder for MockRedisCache.
type MockRedisCacheMockRecorder struct {
	mock *MockRedisCache
}

// NewMockRedisCache creates a new mock instance.
func NewMockRedisCache(ctrl *gomock.Controller) *MockRedisCache {
	mock := &MockRedisCache{ctrl: ctrl}
	mock.recorder = &MockRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisCache) EXPECT() *MockRedisCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisCache) Delete(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisCacheMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisCache)(nil).Delete), ctx, key)
}

// Exists mocks base method.
func (m *MockRedisCache) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRedisCacheMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedisCache)(nil).Exists), ctx, key)
}

// Expire mocks base method.
func (m *MockRedisCache) Expire(ctx context.Context, key string, seconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, seconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockRedisCacheMockRecorder) Expire(ctx, key, seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisCache)(nil).Expire), ctx, key, seconds)
}

// Get mocks base method.
func (m *MockRedisCache) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisCache)(nil).Get), ctx, key)
}

// NewRedisLock mocks base method.
func (m *MockRedisCache) NewRedisLock(key string) *redis.RedisLock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRedisLock", key)
	ret0, _ := ret[0].(*redis.RedisLock)
	return ret0
}

// NewRedisLock indicates an expected call of NewRedisLock.
func (mr *MockRedisCacheMockRecorder) NewRedisLock(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRedisLock", reflect.TypeOf((*MockRedisCache)(nil).NewRedisLock), key)
}

// Sadd mocks base method.
func (m *MockRedisCache) Sadd(ctx context.Context, key string, values ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sadd", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sadd indicates an expected call of Sadd.
func (mr *MockRedisCacheMockRecorder) Sadd(ctx, key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sadd", reflect.TypeOf((*MockRedisCache)(nil).Sadd), varargs...)
}

// Scard mocks base method.
func (m *MockRedisCache) Scard(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scard", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scard indicates an expected call of Scard.
func (mr *MockRedisCacheMockRecorder) Scard(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scard", reflect.TypeOf((*MockRedisCache)(nil).Scard), ctx, key)
}

// Set mocks base method.
func (m *MockRedisCache) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisCacheMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisCache)(nil).Set), ctx, key, value)
}

// Smembers mocks base method.
func (m *MockRedisCache) Smembers(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Smembers", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Smembers indicates an expected call of Smembers.
func (mr *MockRedisCacheMockRecorder) Smembers(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Smembers", reflect.TypeOf((*MockRedisCache)(nil).Smembers), ctx, key)
}

// MockRedisLock is a mock of RedisLock interface.
type MockRedisLock struct {
	ctrl     *gomock.Controller
	recorder *MockRedisLockMockRecorder
}

// MockRedisLockMockRecorder is the mock recorder for MockRedisLock.
type MockRedisLockMockRecorder struct {
	mock *MockRedisLock
}

// NewMockRedisLock creates a new mock instance.
func NewMockRedisLock(ctrl *gomock.Controller) *MockRedisLock {
	mock := &MockRedisLock{ctrl: ctrl}
	mock.recorder = &MockRedisLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisLock) EXPECT() *MockRedisLockMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockRedisLock) Acquire() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockRedisLockMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockRedisLock)(nil).Acquire))
}

// Release mocks base method.
func (m *MockRedisLock) Release() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockRedisLockMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockRedisLock)(nil).Release))
}

// SetExpire mocks base method.
func (m *MockRedisLock) SetExpire(seconds int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExpire", seconds)
}

// SetExpire indicates an expected call of SetExpire.
func (mr *MockRedisLockMockRecorder) SetExpire(seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpire", reflect.TypeOf((*MockRedisLock)(nil).SetExpire), seconds)
}
