// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/asynq/asynq.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockTaskQueue is a mock of TaskQueue interface.
type MockTaskQueue struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueueMockRecorder
}

// MockTaskQueueMockRecorder is the mock recorder for MockTaskQueue.
type MockTaskQueueMockRecorder struct {
	mock *MockTaskQueue
}

// NewMockTaskQueue creates a new mock instance.
func NewMockTaskQueue(ctrl *gomock.Controller) *MockTaskQueue {
	mock := &MockTaskQueue{ctrl: ctrl}
	mock.recorder = &MockTaskQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueue) EXPECT() *MockTaskQueueMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockTaskQueue) Enqueue(task *asynq.Task, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{task}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enqueue", varargs...)
	ret0, _ := ret[0].(*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockTaskQueueMockRecorder) Enqueue(task interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{task}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockTaskQueue)(nil).Enqueue), varargs...)
}

// EnqueueContext mocks base method.
func (m *MockTaskQueue) EnqueueContext(ctx context.Context, task *asynq.Task, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, task}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueContext", varargs...)
	ret0, _ := ret[0].(*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueContext indicates an expected call of EnqueueContext.
func (mr *MockTaskQueueMockRecorder) EnqueueContext(ctx, task interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, task}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueContext", reflect.TypeOf((*MockTaskQueue)(nil).EnqueueContext), varargs...)
}
