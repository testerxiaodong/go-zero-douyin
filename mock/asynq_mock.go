// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/asynq/asynq.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockTaskQueueClient is a mock of TaskQueueClient interface.
type MockTaskQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueueClientMockRecorder
}

// MockTaskQueueClientMockRecorder is the mock recorder for MockTaskQueueClient.
type MockTaskQueueClientMockRecorder struct {
	mock *MockTaskQueueClient
}

// NewMockTaskQueueClient creates a new mock instance.
func NewMockTaskQueueClient(ctrl *gomock.Controller) *MockTaskQueueClient {
	mock := &MockTaskQueueClient{ctrl: ctrl}
	mock.recorder = &MockTaskQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueueClient) EXPECT() *MockTaskQueueClientMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockTaskQueueClient) Enqueue(task *asynq.Task, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{task}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enqueue", varargs...)
	ret0, _ := ret[0].(*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockTaskQueueClientMockRecorder) Enqueue(task interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{task}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockTaskQueueClient)(nil).Enqueue), varargs...)
}

// EnqueueContext mocks base method.
func (m *MockTaskQueueClient) EnqueueContext(ctx context.Context, task *asynq.Task, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, task}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueContext", varargs...)
	ret0, _ := ret[0].(*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueContext indicates an expected call of EnqueueContext.
func (mr *MockTaskQueueClientMockRecorder) EnqueueContext(ctx, task interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, task}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueContext", reflect.TypeOf((*MockTaskQueueClient)(nil).EnqueueContext), varargs...)
}
